// Generated by CoffeeScript 1.9.2
(function() {
  var Identifies, Input, InputMassive, Keywords, Literals, Output, Separators, isKeyword, isLiteral, isNumber, isSeparator, lexicalAnalysis, streamWords,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Input = document.getElementById("input-area");

  Output = document.getElementById("output-area");

  Input.value = "";

  Output.value = "";

  InputMassive = [];

  Keywords = ["ROWVECTOR", "COLVECTOR", "MATRIX", "PRINT"];

  Separators = ["(", ",", ")", "=", "+", "-", "*", "^", "@"];

  Identifies = [""];

  Literals = [];


  /* */

  console.log("courseos@razumov:~> Let's test!");

  streamWords = function() {
    var i, j, k, len, num_n, ref, stage, word;
    stage = Input.value;
    num_n = -1;
    if (event.keyCode === 13) {
      for (j = 0, len = stage.length; j < len; j++) {
        word = stage[j];
        for (i = k = 0, ref = word.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
          if (word.charAt(i) === "\n") {
            num_n++;
          }
        }
      }
      InputMassive = stage.split("\n");
      console.log(InputMassive);
      return lexicalAnalysis(InputMassive, num_n);
    }
  };

  lexicalAnalysis = function(arr, n) {
    var i, iK, iL, iN, iS, j, preResult, ref, ref1, ref2, results, word;
    word = arr[n];
    word = word.replace(/\s+$/, "");
    preResult = "";
    results = [];
    for (i = j = 0, ref = word.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      if ((ref1 = word.charAt(i), indexOf.call(Separators, ref1) >= 0) || word.charAt(i) === ' ' || i === word.length) {
        iK = isKeyword(preResult);
        if (iK === false) {
          iL = isLiteral(preResult);
        }
        iN = isNumber(preResult);
        iS = isSeparator(word.charAt(i));
        if (iK === true) {
          preResult = "";
          continue;
        }
        if (iS === true) {
          preResult = "";
          continue;
        }
        if (iL === true) {
          preResult = "";
          continue;
        }
        if (iN === true) {
          preResult = "";
          continue;
        }
        if (ref2 = word.charAt(i - 1), indexOf.call(Separators, ref2) >= 0) {
          continue;
        }
        if (word.charAt(i - 1) === " ") {
          continue;
        }
        if (word.charAt(i) === "") {
          continue;
        }
        console.log("undefined symbol");
        preResult = "";
        continue;
      }
      results.push(preResult += word.charAt(i));
    }
    return results;
  };

  Input.addEventListener('keyup', streamWords, false);


  /* */

  isKeyword = function(str) {
    var index, j, len, word;
    for (index = j = 0, len = Keywords.length; j < len; index = ++j) {
      word = Keywords[index];
      if (word === str) {
        console.log("courseos@razumov:~> " + Keywords[index] + " is keyword");
        return true;
      }
    }
    return false;
  };

  isNumber = function(str) {
    if (("0" <= str && str <= "9")) {
      console.log("courseos@razumov:~> " + str + " is number");
      return true;
    }
    return false;
  };

  isSeparator = function(str) {
    var index, j, len, word;
    for (index = j = 0, len = Separators.length; j < len; index = ++j) {
      word = Separators[index];
      if (word === str) {
        console.log("courseos@razumov:~> " + Separators[index] + " is separator");
        return true;
      }
    }
    return false;
  };

  isLiteral = function(str) {
    if (("A" <= str && str <= "Z")) {
      console.log("courseos@razumov:~> " + str + " is literal");
      return true;
    }
    return false;
  };

}).call(this);

//# sourceMappingURL=script.js.map
