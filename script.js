// Generated by CoffeeScript 1.9.2
(function() {
  var ConvRes, Convol, Input, InputMassive, Keywords, Literals, Output, Separators, deleteConvol, doBrackets, doMath, doPriority, isKeyword, isLiteral, isNumber, isSeparator, lexicalAnalysis, streamWords, syntaxAnalys, turn, value_command,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Input = document.getElementById("input-area");

  Output = document.getElementById("output-area");

  Input.value = "";

  Output.value = "";

  InputMassive = [];

  Convol = [];

  value_command = [];

  turn = [];

  ConvRes = [];

  Keywords = ["ROWVECTOR", "COLVECTOR", "MATRIX", "PRINT"];

  Separators = ["(", ",", ")", "=", "+", "-", "*", "^", "@"];

  Literals = [];


  /* */

  console.log("courseos@razumov:~> Let's test!");

  streamWords = function() {
    var i, j, k, len, num_n, ref, stage, word;
    stage = Input.value;
    num_n = -1;
    if (event.keyCode === 13) {
      for (j = 0, len = stage.length; j < len; j++) {
        word = stage[j];
        for (i = k = 0, ref = word.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
          if (word.charAt(i) === "\n") {
            num_n++;
          }
        }
      }
      InputMassive = stage.split("\n");
      lexicalAnalysis(InputMassive, num_n);
      Convol.push([0, 0]);
      return syntaxAnalys();
    }
  };

  lexicalAnalysis = function(arr, n) {
    var i, iK, iL, iN, iS, j, preResult, ref, ref1, ref2, results, word;
    word = arr[n];
    console.log(word);
    word = word.replace(/\s+$/, "");
    preResult = "";
    results = [];
    for (i = j = 0, ref = word.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      if ((ref1 = word.charAt(i), indexOf.call(Separators, ref1) >= 0) || word.charAt(i) === ' ' || i === word.length) {
        iK = isKeyword(preResult, word);
        if (iK === false) {
          iL = isLiteral(preResult, word);
        }
        iN = isNumber(preResult, word);
        iS = isSeparator(word.charAt(i), word);
        if (iK === true) {
          preResult = "";
          continue;
        }
        if (iS === true) {
          preResult = "";
          continue;
        }
        if (iL === true) {
          preResult = "";
          continue;
        }
        if (iN === true) {
          preResult = "";
          continue;
        }
        if (ref2 = word.charAt(i - 1), indexOf.call(Separators, ref2) >= 0) {
          continue;
        }
        if (word.charAt(i - 1) === " ") {
          continue;
        }
        if (word.charAt(i) === "") {
          continue;
        }
        console.log("undefined symbol");
        preResult = "";
        continue;
      }
      results.push(preResult += word.charAt(i));
    }
    return results;
  };

  Input.addEventListener('keyup', streamWords, false);

  syntaxAnalys = function() {
    var j, k, l, len, len1, len2, len3, m, results, word;
    if (Convol[0][0] === 1 && Convol[0][1] === 0) {
      if (Convol[1][0] === 3) {
        if (Literals[Convol[1][1]][1] === false && Literals[Convol[1][1]][3] === false && Literals[Convol[1][1]][5] === false) {
          if (Convol[2][0] === 2 && Convol[2][1] === 0) {
            if (Convol[3][0] === 4) {
              if (Convol[4][0] === 2 && Convol[4][1] === 1) {
                if (Convol[5][0] === 4) {
                  if (Convol[6][0] === 2 && Convol[6][1] === 2) {
                    if (Convol[7][0] === 0) {
                      Literals[Convol[1][1]][5] = "ROWVECTOR";
                      Literals[Convol[1][1]][1] = Convol[3][1];
                      Literals[Convol[1][1]][2] = Convol[5][1];
                      deleteConvol();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (Convol[0][0] === 1 && Convol[0][1] === 1) {
      if (Convol[1][0] === 3) {
        if (Literals[Convol[1][1]][1] === false && Literals[Convol[1][1]][2] === false && Literals[Convol[1][1]][3] === false) {
          if (Convol[2][0] === 2 && Convol[2][1] === 0) {
            if (Convol[3][0] === 4) {
              if (Convol[4][0] === 2 && Convol[4][1] === 1) {
                if (Convol[5][0] === 4) {
                  if (Convol[6][0] === 2 && Convol[6][1] === 2) {
                    if (Convol[7][0] === 0) {
                      Literals[Convol[1][1]][5] = "COLVECTOR";
                      Literals[Convol[1][1]][1] = Convol[3][1];
                      Literals[Convol[1][1]][2] = Convol[5][1];
                      deleteConvol();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (Convol[0][0] === 1 && Convol[0][1] === 2) {
      if (Convol[1][0] === 3) {
        if (Literals[Convol[1][1]][1] === false && Literals[Convol[1][1]][2] === false && Literals[Convol[1][1]][3] === false) {
          if (Convol[2][0] === 2 && Convol[2][1] === 0) {
            if (Convol[3][0] === 2 && Convol[3][1] === 0) {
              if (Convol[4][0] === 4) {
                if (Convol[5][0] === 2 && Convol[5][1] === 1) {
                  if (Convol[6][0] === 4) {
                    if (Convol[7][0] === 2 && Convol[7][1] === 2) {
                      if (Convol[8][0] === 2 && Convol[8][1] === 0) {
                        if (Convol[9][0] === 4) {
                          if (Convol[10][0] === 2 && Convol[10][1] === 1) {
                            if (Convol[11][0] === 4) {
                              if (Convol[12][0] === 2 && Convol[12][1] === 2) {
                                if (Convol[13][0] === 2 && Convol[13][1] === 2) {
                                  if (Convol[14][0] === 0) {
                                    Literals[Convol[1][1]][5] = "MATRIX";
                                    Literals[Convol[1][1]][1] = Convol[4][1];
                                    Literals[Convol[1][1]][2] = Convol[6][1];
                                    Literals[Convol[1][1]][3] = Convol[9][1];
                                    Literals[Convol[1][1]][4] = Convol[11][1];
                                    deleteConvol();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (Convol[0][0] === 1 && Convol[0][1] === 3) {
      if (Convol[1][0] === 2 && Convol[1][1] === 0) {
        if (Convol[2][0] === 3) {
          if (Convol[3][0] === 2 && Convol[3][1] === 2) {
            if (Convol[4][0] === 0) {
              for (j = 0, len = Literals.length; j < len; j++) {
                word = Literals[j];
                if (word[0] === Literals[Convol[2][1]][0] && Literals[Convol[2][1]][5] !== false) {
                  console.log("PRINT IS...");
                  deleteConvol();
                }
              }
            }
          }
        }
      }
    }
    if (Convol[0][0] === 3) {
      for (k = 0, len1 = Literals.length; k < len1; k++) {
        word = Literals[k];
        if (word[0] === Literals[Convol[0][1]][0] && Literals[Convol[0][1]][5] === "ROWVECTOR" || Literals[Convol[0][1]][5] === "COLVECTOR") {
          if (Convol[1][0] === 2 && Convol[1][1] === 0) {
            if (Convol[2][0] === 4 && Convol[2][1] === '1' || Convol[2][1] === '2') {
              if (Convol[3][0] === 2 && Convol[3][1] === 2) {
                if (Convol[4][0] === 0) {
                  console.log("VECTOR " + Literals[Convol[0][1]][Convol[2][1]]);
                  deleteConvol();
                }
              }
            }
          }
        }
      }
    }
    if (Convol[0][0] === 3) {
      for (l = 0, len2 = Literals.length; l < len2; l++) {
        word = Literals[l];
        if (word[0] === Literals[Convol[0][1]][0] && Literals[Convol[0][1]][5] === "MATRIX") {
          if (Convol[1][0] === 2 && Convol[1][1] === 0) {
            if (Convol[2][0] === 4 && Convol[2][1] === '1' || Convol[2][1] === '2') {
              if (Convol[3][0] === 2 && Convol[3][1] === 1) {
                if (Convol[4][0] === 4 && Convol[4][1] === '1' || Convol[4][1] === '2') {
                  if (Convol[5][0] === 2 && Convol[5][1] === 2) {
                    if (Convol[6][0] === 0) {
                      if (Convol[2][1] === '1' && Convol[4][1] === '1') {
                        console.log("MATRIX " + Literals[Convol[0][1]][1]);
                      }
                      if (Convol[2][1] === '1' && Convol[4][1] === '2') {
                        console.log("MATRIX " + Literals[Convol[0][1]][2]);
                      }
                      if (Convol[2][1] === '2' && Convol[4][1] === '1') {
                        console.log("MATRIX " + Literals[Convol[0][1]][3]);
                      }
                      if (Convol[2][1] === '2' && Convol[4][1] === '2') {
                        console.log("MATRIX " + Literals[Convol[0][1]][4]);
                      }
                      deleteConvol();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (Convol[0][0] === 3) {
      results = [];
      for (m = 0, len3 = Literals.length; m < len3; m++) {
        word = Literals[m];
        if (word[0] === Literals[Convol[0][1]][0]) {
          if (Literals[Convol[0][1]][5] === "ROWVECTOR" || Literals[Convol[0][1]][5] === "COLVECTOR" || Literals[Convol[0][1]][5] === "MATRIX") {
            if (Convol[1][0] === 2 && Convol[1][1] === 3) {
              doBrackets();
              doPriority(2, Convol.length - 1);
              console.log(turn);
              results.push(doMath());
            } else {
              results.push(void 0);
            }
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  doMath = function() {
    var A, first_num, first_type, i, index, j, k, l, len, m, n, o, p, q, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, results, second_num, second_type, temp_m, word;
    results = [];
    for (index = j = 0, len = turn.length; j < len; index = ++j) {
      word = turn[index];
      if (Convol[word][1] === 7) {
        if (Literals[Convol[word - 1][1]][5] === "ROWVECTOR") {
          ConvRes.push(Literals[Convol[word - 1][1]]);
          ConvRes[ConvRes.length - 1][5] = "COLVECTOR";
          Convol[word - 1][2] = ConvRes[ConvRes.length - 1];
        } else if (Literals[Convol[word - 1][1]][5] === "COLVECTOR") {
          ConvRes.push(Literals[Convol[word - 1][1]]);
          ConvRes[ConvRes.length - 1][5] = "ROWVECTOR";
          Convol[word - 1][2] = ConvRes[ConvRes.length - 1];
        }
      }
      if (Convol[word][1] === 8) {
        if (Literals[Convol[word - 1][1]][5] === "MATRIX") {
          ConvRes.push(Literals[Convol[word - 1][1]]);
          temp_m = ConvRes[ConvRes.length - 1][2];
          ConvRes[ConvRes.length - 1][2] = ConvRes[ConvRes.length - 1][3];
          ConvRes[ConvRes.length - 1][3] = temp_m;
          Convol[word - 1][2] = ConvRes[ConvRes.length - 1];
        }
      }
      if (Convol[word][1] === 6) {
        first_num = '';
        first_type = '';
        second_num = '';
        second_type = '';
        for (i = k = ref = word - 1; ref <= 1 ? k < 1 : k > 1; i = ref <= 1 ? ++k : --k) {
          if (Convol[i][2] !== false) {
            if (Convol[i][0] !== 2) {
              if (Convol[i][2] === 'use' && Convol[i][0] === 4) {
                first_num = i;
                first_type = 'Number';
                break;
              } else if (Convol[i][2] === 'use') {
                first_num = i;
                first_type = Literals[Convol[i][1]][5];
                break;
              } else {
                first_num = i;
                first_type = Convol[i][2][5];
                break;
              }
            }
          }
        }
        for (n = l = ref1 = word + 1, ref2 = Convol.length - 2; ref1 <= ref2 ? l <= ref2 : l >= ref2; n = ref1 <= ref2 ? ++l : --l) {
          if (Convol[n][2] !== false) {
            if (Convol[n][0] !== 2) {
              if (Convol[n][2] === 'use' && Convol[n][0] === 4) {
                second_num = n;
                second_type = 'Number';
                break;
              } else if (Convol[n][2] === 'use') {
                second_num = n;
                second_type = Literals[Convol[n][1]][5];
                break;
              } else {
                second_num = n;
                second_type = Convol[n][2][5];
                break;
              }
            }
          }
        }
        console.log(first_num + " first_num");
        console.log(first_type + " first_type");
        console.log(second_num + " second_num");
        console.log(second_type + " second_type");
        if (first_type === "MATRIX" && second_type === "MATRIX") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Literals[Convol[first_num][1]][1] * Literals[Convol[second_num][1]][1] + Literals[Convol[first_num][1]][2] * Literals[Convol[second_num][1]][3];
            ConvRes[ConvRes.length - 1][2] = Literals[Convol[first_num][1]][1] * Literals[Convol[second_num][1]][2] + Literals[Convol[first_num][1]][2] * Literals[Convol[second_num][1]][4];
            ConvRes[ConvRes.length - 1][3] = Literals[Convol[first_num][1]][3] * Literals[Convol[second_num][1]][1] + Literals[Convol[first_num][1]][4] * Literals[Convol[second_num][1]][3];
            ConvRes[ConvRes.length - 1][4] = Literals[Convol[first_num][1]][3] * Literals[Convol[second_num][1]][2] + Literals[Convol[first_num][1]][4] * Literals[Convol[second_num][1]][4];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Literals[Convol[first_num][1]][1] * Convol[second_num][2][1] + Literals[Convol[first_num][1]][2] * Convol[second_num][2][3];
            ConvRes[ConvRes.length - 1][2] = Literals[Convol[first_num][1]][1] * Convol[second_num][2][2] + Literals[Convol[first_num][1]][2] * Convol[second_num][2][4];
            ConvRes[ConvRes.length - 1][3] = Literals[Convol[first_num][1]][3] * Convol[second_num][2][1] + Literals[Convol[first_num][1]][4] * Convol[second_num][2][3];
            ConvRes[ConvRes.length - 1][4] = Literals[Convol[first_num][1]][3] * Convol[second_num][2][2] + Literals[Convol[first_num][1]][4] * Convol[second_num][2][4];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[first_num][2][1] * Literals[Convol[second_num][1]][1] + Convol[first_num][2][2] * Literals[Convol[second_num][1]][3];
            ConvRes[ConvRes.length - 1][2] = Convol[first_num][2][1] * Literals[Convol[second_num][1]][2] + Convol[first_num][2][2] * Literals[Convol[second_num][1]][4];
            ConvRes[ConvRes.length - 1][3] = Convol[first_num][2][3] * Literals[Convol[second_num][1]][1] + Convol[first_num][2][4] * Literals[Convol[second_num][1]][3];
            ConvRes[ConvRes.length - 1][4] = Convol[first_num][2][3] * Literals[Convol[second_num][1]][2] + Convol[first_num][2][4] * Literals[Convol[second_num][1]][4];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[first_num][2][1] * Convol[second_num][2][1] + Convol[first_num][2][2] * Convol[second_num][2][3];
            ConvRes[ConvRes.length - 1][2] = Convol[first_num][2][1] * Convol[second_num][2][2] + Convol[first_num][2][2] * Convol[second_num][2][4];
            ConvRes[ConvRes.length - 1][3] = Convol[first_num][2][3] * Convol[second_num][2][1] + Convol[first_num][2][4] * Convol[second_num][2][3];
            ConvRes[ConvRes.length - 1][4] = Convol[first_num][2][3] * Convol[second_num][2][2] + Convol[first_num][2][4] * Convol[second_num][2][4];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          }
        }
        if (first_type === "MATRIX" && second_type === "Number") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Literals[Convol[first_num][1]][1] * Convol[second_num][1];
            ConvRes[ConvRes.length - 1][2] = Literals[Convol[first_num][1]][2] * Convol[second_num][1];
            ConvRes[ConvRes.length - 1][3] = Literals[Convol[first_num][1]][3] * Convol[second_num][1];
            ConvRes[ConvRes.length - 1][4] = Literals[Convol[first_num][1]][4] * Convol[second_num][1];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Literals[Convol[first_num][1]][1] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][2] = Literals[Convol[first_num][1]][2] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][3] = Literals[Convol[first_num][1]][3] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][4] = Literals[Convol[first_num][1]][4] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[first_num][2][1] * Convol[second_num][1];
            ConvRes[ConvRes.length - 1][2] = Convol[first_num][2][2] * Convol[second_num][1];
            ConvRes[ConvRes.length - 1][3] = Convol[first_num][2][3] * Convol[second_num][1];
            ConvRes[ConvRes.length - 1][4] = Convol[first_num][2][4] * Convol[second_num][1];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[first_num][2][1] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][2] = Convol[first_num][2][2] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][3] = Convol[first_num][2][3] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][4] = Convol[first_num][2][4] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          }
        }
        if (first_type === "Number" && second_type === "MATRIX") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Literals[Convol[second_num][1]][1] * Convol[first_num][1];
            ConvRes[ConvRes.length - 1][2] = Literals[Convol[second_num][1]][2] * Convol[first_num][1];
            ConvRes[ConvRes.length - 1][3] = Literals[Convol[second_num][1]][3] * Convol[first_num][1];
            ConvRes[ConvRes.length - 1][4] = Literals[Convol[second_num][1]][4] * Convol[first_num][1];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[second_num][2] = ConvRes[ConvRes.length - 1];
            Convol[first_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[second_num][2][1] * Convol[first_num][1];
            ConvRes[ConvRes.length - 1][2] = Convol[second_num][2][2] * Convol[first_num][1];
            ConvRes[ConvRes.length - 1][3] = Convol[second_num][2][3] * Convol[first_num][1];
            ConvRes[ConvRes.length - 1][4] = Convol[second_num][2][4] * Convol[first_num][1];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[second_num][2] = ConvRes[ConvRes.length - 1];
            Convol[first_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Literals[Convol[second_num][1]][1] * Convol[first_num][2][1];
            ConvRes[ConvRes.length - 1][2] = Literals[Convol[second_num][1]][2] * Convol[first_num][2][1];
            ConvRes[ConvRes.length - 1][3] = Literals[Convol[second_num][1]][3] * Convol[first_num][2][1];
            ConvRes[ConvRes.length - 1][4] = Literals[Convol[second_num][1]][4] * Convol[first_num][2][1];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[second_num][2] = ConvRes[ConvRes.length - 1];
            Convol[first_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[second_num][2][1] * Convol[first_num][2][1];
            ConvRes[ConvRes.length - 1][2] = Convol[second_num][2][2] * Convol[first_num][2][1];
            ConvRes[ConvRes.length - 1][3] = Convol[second_num][2][3] * Convol[first_num][2][1];
            ConvRes[ConvRes.length - 1][4] = Convol[second_num][2][4] * Convol[first_num][2][1];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[second_num][2] = ConvRes[ConvRes.length - 1];
            Convol[first_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          }
        }
        if (first_type === "Number" && second_type === "ROWVECTOR" || first_type === "Number" && second_type === "COLVECTOR") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Literals[Convol[second_num][1]][1] * Convol[first_num][1];
            ConvRes[ConvRes.length - 1][2] = Literals[Convol[second_num][1]][2] * Convol[first_num][1];
            ConvRes[ConvRes.length - 1][5] = Literals[Convol[second_num][1]][5];
            Convol[second_num][2] = ConvRes[ConvRes.length - 1];
            Convol[first_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[second_num][2][1] * Convol[first_num][1];
            ConvRes[ConvRes.length - 1][2] = Convol[second_num][2][2] * Convol[first_num][1];
            ConvRes[ConvRes.length - 1][5] = Convol[second_num][2][5];
            Convol[second_num][2] = ConvRes[ConvRes.length - 1];
            Convol[first_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Literals[Convol[second_num][1]][1] * Convol[first_num][2][1];
            ConvRes[ConvRes.length - 1][2] = Literals[Convol[second_num][1]][2] * Convol[first_num][2][1];
            ConvRes[ConvRes.length - 1][5] = Literals[Convol[second_num][1]][5];
            Convol[second_num][2] = ConvRes[ConvRes.length - 1];
            Convol[first_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[second_num][2][1] * Convol[first_num][2][1];
            ConvRes[ConvRes.length - 1][2] = Convol[second_num][2][2] * Convol[first_num][2][1];
            ConvRes[ConvRes.length - 1][5] = Convol[second_num][2][5];
            Convol[second_num][2] = ConvRes[ConvRes.length - 1];
            Convol[first_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          }
        }
        if (first_type === "ROWVECTOR" && second_type === "Number" || first_type === "COLVECTOR" && second_type === "Number") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Literals[Convol[first_num][1]][1] * Convol[second_num][1];
            ConvRes[ConvRes.length - 1][2] = Literals[Convol[first_num][1]][2] * Convol[second_num][1];
            ConvRes[ConvRes.length - 1][5] = Literals[Convol[first_num][1]][5];
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Literals[Convol[first_num][1]][1] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][2] = Literals[Convol[first_num][1]][2] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][5] = Literals[Convol[first_num][1]][5];
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[first_num][2][1] * Convol[second_num][1];
            ConvRes[ConvRes.length - 1][2] = Convol[first_num][2][2] * Convol[second_num][1];
            ConvRes[ConvRes.length - 1][5] = Convol[first_num][2][5];
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[first_num][2][1] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][2] = Convol[first_num][2][2] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][5] = Convol[first_num][2][5];
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          }
        }
        if (first_type === "ROWVECTOR" && second_type === "COLVECTOR") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Literals[Convol[first_num][1]][1] * Literals[Convol[second_num][1]][1] + Literals[Convol[first_num][1]][2] * Literals[Convol[second_num][1]][2];
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Literals[Convol[first_num][1]][1] * Convol[second_num][2][1] + Literals[Convol[first_num][1]][2] * Convol[second_num][2][2];
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[first_num][2][1] * Literals[Convol[second_num][1]][1] + Convol[first_num][2][2] * Literals[Convol[second_num][1]][2];
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[first_num][2][1] * Convol[second_num][2][1] + Convol[first_num][2][2] * Convol[second_num][2][2];
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          }
        }
        if (first_type === "COLVECTOR" && second_type === "ROWVECTOR") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Literals[Convol[first_num][1]][1] * Literals[Convol[second_num][1]][1];
            ConvRes[ConvRes.length - 1][2] = Literals[Convol[first_num][1]][1] * Literals[Convol[second_num][1]][2];
            ConvRes[ConvRes.length - 1][3] = Literals[Convol[first_num][1]][2] * Literals[Convol[second_num][1]][1];
            ConvRes[ConvRes.length - 1][4] = Literals[Convol[first_num][1]][2] * Literals[Convol[second_num][1]][2];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Literals[Convol[first_num][1]][1] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][2] = Literals[Convol[first_num][1]][1] * Convol[second_num][2][2];
            ConvRes[ConvRes.length - 1][3] = Literals[Convol[first_num][1]][2] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][4] = Literals[Convol[first_num][1]][2] * Convol[second_num][2][2];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[first_num][2][1] * Literals[Convol[second_num][1]][1];
            ConvRes[ConvRes.length - 1][2] = Convol[first_num][2][1] * Literals[Convol[second_num][1]][2];
            ConvRes[ConvRes.length - 1][3] = Convol[first_num][2][2] * Literals[Convol[second_num][1]][1];
            ConvRes[ConvRes.length - 1][4] = Convol[first_num][2][2] * Literals[Convol[second_num][1]][2];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[first_num][2][1] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][2] = Convol[first_num][2][1] * Convol[second_num][2][2];
            ConvRes[ConvRes.length - 1][3] = Convol[first_num][2][2] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][4] = Convol[first_num][2][2] * Convol[second_num][2][2];
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          }
        }
        if (first_type === "Number" && second_type === "Number") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[first_num][1] * Convol[second_num][1];
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[first_num][1] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[first_num][2][1] * Convol[second_num][1];
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Convol[first_num][2][1] * Convol[second_num][2][1];
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          }
        }
      }
      if (Convol[word][1] === 4) {
        first_num = '';
        first_type = '';
        second_num = '';
        second_type = '';
        for (i = m = ref3 = word - 1; ref3 <= 1 ? m < 1 : m > 1; i = ref3 <= 1 ? ++m : --m) {
          if (Convol[i][2] !== false) {
            if (Convol[i][0] !== 2) {
              if (Convol[i][2] === 'use' && Convol[i][0] === 4) {
                first_num = i;
                first_type = 'Number';
                break;
              } else if (Convol[i][2] === 'use') {
                first_num = i;
                first_type = Literals[Convol[i][1]][5];
                break;
              } else {
                first_num = i;
                first_type = Convol[i][2][5];
                break;
              }
            }
          }
        }
        for (n = o = ref4 = word + 1, ref5 = Convol.length - 2; ref4 <= ref5 ? o <= ref5 : o >= ref5; n = ref4 <= ref5 ? ++o : --o) {
          if (Convol[n][2] !== false) {
            if (Convol[n][0] !== 2) {
              if (Convol[n][2] === 'use' && Convol[n][0] === 4) {
                second_num = n;
                second_type = 'Number';
                break;
              } else if (Convol[n][2] === 'use') {
                second_num = n;
                second_type = Literals[Convol[n][1]][5];
                break;
              } else {
                second_num = n;
                second_type = Convol[n][2][5];
                break;
              }
            }
          }
        }
        console.log(first_num + " first_num");
        console.log(first_type + " first_type");
        console.log(second_num + " second_num");
        console.log(second_type + " second_type");
        if (first_type === "MATRIX" && second_type === "MATRIX") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Literals[Convol[first_num][1]][1]) + Number(Literals[Convol[second_num][1]][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Literals[Convol[first_num][1]][2]) + Number(Literals[Convol[second_num][1]][2]);
            ConvRes[ConvRes.length - 1][3] = Number(Literals[Convol[first_num][1]][3]) + Number(Literals[Convol[second_num][1]][3]);
            ConvRes[ConvRes.length - 1][4] = Number(Literals[Convol[first_num][1]][4]) + Number(Literals[Convol[second_num][1]][4]);
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Literals[Convol[first_num][1]][1]) + Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Literals[Convol[first_num][1]][2]) + Number(Convol[second_num][2][2]);
            ConvRes[ConvRes.length - 1][3] = Number(Literals[Convol[first_num][1]][3]) + Number(Convol[second_num][2][3]);
            ConvRes[ConvRes.length - 1][4] = Number(Literals[Convol[first_num][1]][4]) + Number(Convol[second_num][2][4]);
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) + Number(Literals[Convol[second_num][1]][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Convol[first_num][2][2]) + Number(Literals[Convol[second_num][1]][2]);
            ConvRes[ConvRes.length - 1][3] = Number(Convol[first_num][2][3]) + Number(Literals[Convol[second_num][1]][3]);
            ConvRes[ConvRes.length - 1][4] = Number(Convol[first_num][2][4]) + Number(Literals[Convol[second_num][1]][4]);
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) + Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Convol[first_num][2][2]) + Number(Convol[second_num][2][2]);
            ConvRes[ConvRes.length - 1][3] = Number(Convol[first_num][2][3]) + Number(Convol[second_num][2][3]);
            ConvRes[ConvRes.length - 1][4] = Number(Convol[first_num][2][4]) + Number(Convol[second_num][2][4]);
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          }
        }
        if (first_type === "ROWVECTOR" && second_type === "ROWVECTOR") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Literals[Convol[first_num][1]][1]) + Number(Literals[Convol[second_num][1]][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Literals[Convol[first_num][1]][2]) + Number(Literals[Convol[second_num][1]][2]);
            ConvRes[ConvRes.length - 1][5] = "ROWVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Literals[Convol[first_num][1]][1]) + Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Literals[Convol[first_num][1]][2]) + Number(Convol[second_num][2][2]);
            ConvRes[ConvRes.length - 1][5] = "ROWVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) + Number(Literals[Convol[second_num][1]][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Convol[first_num][2][2]) + Number(Literals[Convol[second_num][1]][2]);
            ConvRes[ConvRes.length - 1][5] = "ROWVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) + Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Convol[first_num][2][2]) + Number(Convol[second_num][2][2]);
            ConvRes[ConvRes.length - 1][5] = "ROWVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          }
        }
        if (first_type === "COLVECTOR" && second_type === "COLVECTOR") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Literals[Convol[first_num][1]][1]) + Number(Literals[Convol[second_num][1]][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Literals[Convol[first_num][1]][2]) + Number(Literals[Convol[second_num][1]][2]);
            ConvRes[ConvRes.length - 1][5] = "COLVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Literals[Convol[first_num][1]][1]) + Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Literals[Convol[first_num][1]][2]) + Number(Convol[second_num][2][2]);
            ConvRes[ConvRes.length - 1][5] = "COLVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) + Number(Literals[Convol[second_num][1]][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Convol[first_num][2][2]) + Number(Literals[Convol[second_num][1]][2]);
            ConvRes[ConvRes.length - 1][5] = "COLVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) + Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Convol[first_num][2][2]) + Number(Convol[second_num][2][2]);
            ConvRes[ConvRes.length - 1][5] = "COLVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          }
        }
        if (first_type === "Number" && second_type === "Number") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][1]) + Number(Convol[second_num][1]);
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][1]) + Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) + Number(Convol[second_num][1]);
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) + Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          }
        }
      }
      if (Convol[word][1] === 5) {
        first_num = '';
        first_type = '';
        second_num = '';
        second_type = '';
        for (i = p = ref6 = word - 1; ref6 <= 1 ? p < 1 : p > 1; i = ref6 <= 1 ? ++p : --p) {
          if (Convol[i][2] !== false) {
            if (Convol[i][0] !== 2) {
              if (Convol[i][2] === 'use' && Convol[i][0] === 4) {
                first_num = i;
                first_type = 'Number';
                break;
              } else if (Convol[i][2] === 'use') {
                first_num = i;
                first_type = Literals[Convol[i][1]][5];
                break;
              } else {
                first_num = i;
                first_type = Convol[i][2][5];
                break;
              }
            }
          }
        }
        for (n = q = ref7 = word + 1, ref8 = Convol.length - 2; ref7 <= ref8 ? q <= ref8 : q >= ref8; n = ref7 <= ref8 ? ++q : --q) {
          if (Convol[n][2] !== false) {
            if (Convol[n][0] !== 2) {
              if (Convol[n][2] === 'use' && Convol[n][0] === 4) {
                second_num = n;
                second_type = 'Number';
                break;
              } else if (Convol[n][2] === 'use') {
                second_num = n;
                second_type = Literals[Convol[n][1]][5];
                break;
              } else {
                second_num = n;
                second_type = Convol[n][2][5];
                break;
              }
            }
          }
        }
        console.log(first_num + " first_num");
        console.log(first_type + " first_type");
        console.log(second_num + " second_num");
        console.log(second_type + " second_type");
        if (first_type === "MATRIX" && second_type === "MATRIX") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Literals[Convol[first_num][1]][1]) - Number(Literals[Convol[second_num][1]][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Literals[Convol[first_num][1]][2]) - Number(Literals[Convol[second_num][1]][2]);
            ConvRes[ConvRes.length - 1][3] = Number(Literals[Convol[first_num][1]][3]) - Number(Literals[Convol[second_num][1]][3]);
            ConvRes[ConvRes.length - 1][4] = Number(Literals[Convol[first_num][1]][4]) - Number(Literals[Convol[second_num][1]][4]);
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Literals[Convol[first_num][1]][1]) - Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Literals[Convol[first_num][1]][2]) - Number(Convol[second_num][2][2]);
            ConvRes[ConvRes.length - 1][3] = Number(Literals[Convol[first_num][1]][3]) - Number(Convol[second_num][2][3]);
            ConvRes[ConvRes.length - 1][4] = Number(Literals[Convol[first_num][1]][4]) - Number(Convol[second_num][2][4]);
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) - Number(Literals[Convol[second_num][1]][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Convol[first_num][2][2]) - Number(Literals[Convol[second_num][1]][2]);
            ConvRes[ConvRes.length - 1][3] = Number(Convol[first_num][2][3]) - Number(Literals[Convol[second_num][1]][3]);
            ConvRes[ConvRes.length - 1][4] = Number(Convol[first_num][2][4]) - Number(Literals[Convol[second_num][1]][4]);
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) - Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Convol[first_num][2][2]) - Number(Convol[second_num][2][2]);
            ConvRes[ConvRes.length - 1][3] = Number(Convol[first_num][2][3]) - Number(Convol[second_num][2][3]);
            ConvRes[ConvRes.length - 1][4] = Number(Convol[first_num][2][4]) - Number(Convol[second_num][2][4]);
            ConvRes[ConvRes.length - 1][5] = "MATRIX";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          }
        }
        if (first_type === "ROWVECTOR" && second_type === "ROWVECTOR") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Literals[Convol[first_num][1]][1]) - Number(Literals[Convol[second_num][1]][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Literals[Convol[first_num][1]][2]) - Number(Literals[Convol[second_num][1]][2]);
            ConvRes[ConvRes.length - 1][5] = "ROWVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Literals[Convol[first_num][1]][1]) - Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Literals[Convol[first_num][1]][2]) - Number(Convol[second_num][2][2]);
            ConvRes[ConvRes.length - 1][5] = "ROWVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) - Number(Literals[Convol[second_num][1]][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Convol[first_num][2][2]) - Number(Literals[Convol[second_num][1]][2]);
            ConvRes[ConvRes.length - 1][5] = "ROWVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) - Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Convol[first_num][2][2]) - Number(Convol[second_num][2][2]);
            ConvRes[ConvRes.length - 1][5] = "ROWVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          }
        }
        if (first_type === "COLVECTOR" && second_type === "COLVECTOR") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Literals[Convol[first_num][1]][1]) - Number(Literals[Convol[second_num][1]][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Literals[Convol[first_num][1]][2]) - Number(Literals[Convol[second_num][1]][2]);
            ConvRes[ConvRes.length - 1][5] = "COLVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Literals[Convol[first_num][1]][1]) - Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Literals[Convol[first_num][1]][2]) - Number(Convol[second_num][2][2]);
            ConvRes[ConvRes.length - 1][5] = "COLVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) - Number(Literals[Convol[second_num][1]][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Convol[first_num][2][2]) - Number(Literals[Convol[second_num][1]][2]);
            ConvRes[ConvRes.length - 1][5] = "COLVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) - Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][2] = Number(Convol[first_num][2][2]) - SNumber(Convol[second_num][2][2]);
            ConvRes[ConvRes.length - 1][5] = "COLVECTOR";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            console.log(ConvRes);
          }
        }
        if (first_type === "Number" && second_type === "Number") {
          if (Convol[first_num][2] === 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][1]) - Number(Convol[second_num][1]);
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            results.push(console.log(ConvRes));
          } else if (Convol[first_num][2] === 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][1]) - Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            results.push(console.log(ConvRes));
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] === 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) - Number(Convol[second_num][1]);
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            results.push(console.log(ConvRes));
          } else if (Convol[first_num][2] !== 'use' && Convol[second_num][2] !== 'use') {
            A = [];
            ConvRes.push(A);
            ConvRes[ConvRes.length - 1][1] = Number(Convol[first_num][2][1]) - Number(Convol[second_num][2][1]);
            ConvRes[ConvRes.length - 1][5] = "Number";
            Convol[first_num][2] = ConvRes[ConvRes.length - 1];
            Convol[second_num][2] = false;
            console.log(Convol);
            results.push(console.log(ConvRes));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  doBrackets = function() {
    var first_br, index1, index2, j, len, results, second_br, word;
    results = [];
    for (index1 = j = 0, len = Convol.length; j < len; index1 = ++j) {
      word = Convol[index1];
      if (word[0] === 2 && word[1] === 0) {
        first_br = index1 + 1;
        index2 = first_br + 1;
        results.push((function() {
          var results1;
          results1 = [];
          while (index2 < Convol.length) {
            if (Convol[index2][0] === 2 && Convol[index2][1] === 2) {
              second_br = index2 - 1;
              doPriority(first_br, second_br);
              break;
            }
            results1.push(index2++);
          }
          return results1;
        })());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  doPriority = function(begin_smb, end_smb) {
    var index1, index2, index3, j, k, l, len, len1, len2, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, results, word1, word2, word3;
    ref = Convol.slice(begin_smb, +end_smb + 1 || 9e9);
    for (index1 = j = 0, len = ref.length; j < len; index1 = ++j) {
      word1 = ref[index1];
      if (Convol[Number(begin_smb + index1)][0] === 2 && Convol[Number(begin_smb + index1)][1] === 7) {
        if (ref1 = Number(begin_smb + index1), indexOf.call(turn, ref1) < 0) {
          turn.push(Number(begin_smb + index1));
        }
      }
      if (Convol[Number(begin_smb + index1)][0] === 2 && Convol[Number(begin_smb + index1)][1] === 8) {
        if (ref2 = Number(begin_smb + index1), indexOf.call(turn, ref2) < 0) {
          turn.push(Number(begin_smb + index1));
        }
      }
    }
    ref3 = Convol.slice(begin_smb, +end_smb + 1 || 9e9);
    for (index2 = k = 0, len1 = ref3.length; k < len1; index2 = ++k) {
      word2 = ref3[index2];
      if (Convol[Number(begin_smb + index2)][0] === 2 && Convol[Number(begin_smb + index2)][1] === 6) {
        if (ref4 = Number(begin_smb + index2), indexOf.call(turn, ref4) < 0) {
          turn.push(Number(begin_smb + index2));
        }
      }
    }
    ref5 = Convol.slice(begin_smb, +end_smb + 1 || 9e9);
    results = [];
    for (index3 = l = 0, len2 = ref5.length; l < len2; index3 = ++l) {
      word3 = ref5[index3];
      if (Convol[Number(begin_smb + index3)][0] === 2 && Convol[Number(begin_smb + index3)][1] === 4) {
        if (ref6 = Number(begin_smb + index3), indexOf.call(turn, ref6) < 0) {
          turn.push(Number(begin_smb + index3));
        }
      }
      if (Convol[Number(begin_smb + index3)][0] === 2 && Convol[Number(begin_smb + index3)][1] === 5) {
        if (ref7 = Number(begin_smb + index3), indexOf.call(turn, ref7) < 0) {
          results.push(turn.push(Number(begin_smb + index3)));
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  deleteConvol = function() {
    return Convol = [];
  };

  isKeyword = function(str, command) {
    var index, j, len, word;
    for (index = j = 0, len = Keywords.length; j < len; index = ++j) {
      word = Keywords[index];
      if (word === str) {
        Convol.push([1, index]);
        return true;
      }
    }
    return false;
  };

  isNumber = function(str, command) {
    if (("0" <= str && str <= "9")) {
      Convol.push([4, str, 'use']);
      value_command.push(str);
      return true;
    }
    return false;
  };

  isSeparator = function(str, command) {
    var index, j, len, word;
    for (index = j = 0, len = Separators.length; j < len; index = ++j) {
      word = Separators[index];
      if (word === str) {
        Convol.push([2, index]);
        return true;
      }
    }
    return false;
  };

  isLiteral = function(str, command) {
    var flag, index, j, len, word;
    if (("A" <= str && str <= "Z")) {
      flag = false;
      for (index = j = 0, len = Literals.length; j < len; index = ++j) {
        word = Literals[index];
        if (word[0] === str) {
          Convol.push([3, index, 'use']);
          flag = true;
        }
      }
      if (flag === false) {
        Literals.push([str, false, false, false, false, false]);
        Convol.push([3, Literals.length - 1, 'use']);
      }
      return true;
    }
    return false;
  };

}).call(this);

//# sourceMappingURL=script.js.map
